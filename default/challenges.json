[
  {
    "id": "72a8066d-d745-11ed-be39-525400a7f0d4",
    "name": "起死回生",
    "description": "### 题目背景\n\n在一个神秘的网络安全组织中，有一位传奇黑客被誉为“偷天换日大师”。传说他拥有超越常人的计算能力和惊人的判断力，可以在几分钟内破解世界上最复杂的密码系统和安全协议。\n\n### 源码\n\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nconst uploadDir = \"files\"\nconst sessionDir = \"sessions\"\n\ntype User struct {\n\tUsername string\n\tIsAdmin  bool\n}\n\nfunc cyberpocAdmin(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tu, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif !u.IsAdmin {\n\t\t\treturn c.HTML(http.StatusForbidden, `<p>You are not administrator.</p>`)\n\t\t}\n\t\treturn next(c)\n\t}\n}\n\nfunc cyberpocAuth(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\t_, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn next(c)\n\t}\n}\n\nfunc getUser(c echo.Context) (u User, err error) {\n\tcookie, err := c.Cookie(\"session\")\n\tif err != nil {\n\t\treturn\n\t}\n\tif cookie.Value == \"\" {\n\t\terr = errors.New(\"Not Login!\")\n\t\treturn\n\t}\n\treturn getUserBySession(cookie.Value)\n}\n\nfunc getUserBySession(session string) (u User, err error) {\n\tvar f = path.Join(sessionDir, session)\n\tb, err := ioutil.ReadFile(f)\n\tif err != nil {\n\t\treturn\n\t}\n\tdecoder := gob.NewDecoder(bytes.NewReader(b))\n\terr = decoder.Decode(&u)\n\treturn\n}\n\nfunc main() {\n\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tu, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn c.HTML(http.StatusOK, loginHtml)\n\t\t}\n\n\t\treturn c.HTML(http.StatusOK, `<H1>CyberPoC GOB: `+u.Username+`</H1><br/>\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\">\n    <button type=\"submit\">Upload</button>\n</form>\n</body>\n<a href='/admin'>Admin Dashboard</a>`)\n\t})\n\n\te.GET(\"/admin\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, os.Getenv(\"flag\"))\n\t}, cyberpocAdmin)\n\n\te.POST(\"/login\", func(c echo.Context) error {\n\t\tusername := c.FormValue(\"username\")\n\t\tvar u = User{\n\t\t\tUsername: username,\n\t\t\tIsAdmin:  false,\n\t\t}\n\n\t\tsession := strconv.FormatInt(time.Now().UnixMicro(), 10)\n\t\tvar f = path.Join(sessionDir, session)\n\n\t\tfile, err := os.Create(f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tencoder := gob.NewEncoder(file)\n\t\tif err := encoder.Encode(u); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tcookie := http.Cookie{\n\t\t\tName:    \"session\",\n\t\t\tValue:   session,\n\t\t\tPath:    \"/\",\n\t\t\tDomain:  \"\",\n\t\t\tExpires: time.Now().Add(time.Hour),\n\t\t}\n\n\t\ttime.AfterFunc(time.Hour, func() {\n\t\t\t_ = os.RemoveAll(f)\n\t\t})\n\n\t\tc.SetCookie(&cookie)\n\t\treturn c.Redirect(302, \"/\")\n\t})\n\n\te.GET(\"/download\", func(c echo.Context) error {\n\t\tfilename := c.QueryParam(\"filename\")\n\t\treturn c.File(path.Join(uploadDir, filename))\n\t})\n\n\te.POST(\"/upload\", func(c echo.Context) error {\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer src.Close()\n\t\tfilename := c.QueryParam(\"filename\")\n\t\tif filename == \"\" {\n\t\t\tfilename = file.Filename\n\t\t}\n\n\t\tfullName := path.Join(uploadDir, filename)\n\t\t// Destination\n\t\tdst, err := os.Create(fullName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer dst.Close()\n\n\t\t// Copy\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn c.HTML(http.StatusOK, fmt.Sprintf(`<h2>Uploaded successfully!</h2><br/>\n<a href='/'>Home</a><br/>\n<a href='/download?filename=%s'>Download</a><br/>\n`, filename))\n\t}, cyberpocAuth)\n\n\t_, err := os.Stat(uploadDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\t_, err = os.Stat(sessionDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(sessionDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "efa390d2-d744-11ed-be39-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1681092879468,
    "updated_at": 1756867407106,
    "html": "<h3>题目背景</h3>\n<p>在一个神秘的网络安全组织中，有一位传奇黑客被誉为“偷天换日大师”。传说他拥有超越常人的计算能力和惊人的判断力，可以在几分钟内破解世界上最复杂的密码系统和安全协议。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;encoding/gob&quot;\n\t&quot;errors&quot;\n\t&quot;fmt&quot;\n\t&quot;io&quot;\n\t&quot;io/ioutil&quot;\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\t&quot;path&quot;\n\t&quot;strconv&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\nconst uploadDir = &quot;files&quot;\nconst sessionDir = &quot;sessions&quot;\n\ntype User struct {\n\tUsername string\n\tIsAdmin  bool\n}\n\nfunc cyberpocAdmin(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\tu, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif !u.IsAdmin {\n\t\t\treturn c.HTML(http.StatusForbidden, `&lt;p&gt;You are not administrator.&lt;/p&gt;`)\n\t\t}\n\t\treturn next(c)\n\t}\n}\n\nfunc cyberpocAuth(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\t_, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn next(c)\n\t}\n}\n\nfunc getUser(c echo.Context) (u User, err error) {\n\tcookie, err := c.Cookie(&quot;session&quot;)\n\tif err != nil {\n\t\treturn\n\t}\n\tif cookie.Value == &quot;&quot; {\n\t\terr = errors.New(&quot;Not Login!&quot;)\n\t\treturn\n\t}\n\treturn getUserBySession(cookie.Value)\n}\n\nfunc getUserBySession(session string) (u User, err error) {\n\tvar f = path.Join(sessionDir, session)\n\tb, err := ioutil.ReadFile(f)\n\tif err != nil {\n\t\treturn\n\t}\n\tdecoder := gob.NewDecoder(bytes.NewReader(b))\n\terr = decoder.Decode(&amp;u)\n\treturn\n}\n\nfunc main() {\n\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\tu, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn c.HTML(http.StatusOK, loginHtml)\n\t\t}\n\n\t\treturn c.HTML(http.StatusOK, `&lt;H1&gt;CyberPoC GOB: `+u.Username+`&lt;/H1&gt;&lt;br/&gt;\n&lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;\n    &lt;button type=&quot;submit&quot;&gt;Upload&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;a href=&#39;/admin&#39;&gt;Admin Dashboard&lt;/a&gt;`)\n\t})\n\n\te.GET(&quot;/admin&quot;, func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, os.Getenv(&quot;flag&quot;))\n\t}, cyberpocAdmin)\n\n\te.POST(&quot;/login&quot;, func(c echo.Context) error {\n\t\tusername := c.FormValue(&quot;username&quot;)\n\t\tvar u = User{\n\t\t\tUsername: username,\n\t\t\tIsAdmin:  false,\n\t\t}\n\n\t\tsession := strconv.FormatInt(time.Now().UnixMicro(), 10)\n\t\tvar f = path.Join(sessionDir, session)\n\n\t\tfile, err := os.Create(f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tencoder := gob.NewEncoder(file)\n\t\tif err := encoder.Encode(u); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tcookie := http.Cookie{\n\t\t\tName:    &quot;session&quot;,\n\t\t\tValue:   session,\n\t\t\tPath:    &quot;/&quot;,\n\t\t\tDomain:  &quot;&quot;,\n\t\t\tExpires: time.Now().Add(time.Hour),\n\t\t}\n\n\t\ttime.AfterFunc(time.Hour, func() {\n\t\t\t_ = os.RemoveAll(f)\n\t\t})\n\n\t\tc.SetCookie(&amp;cookie)\n\t\treturn c.Redirect(302, &quot;/&quot;)\n\t})\n\n\te.GET(&quot;/download&quot;, func(c echo.Context) error {\n\t\tfilename := c.QueryParam(&quot;filename&quot;)\n\t\treturn c.File(path.Join(uploadDir, filename))\n\t})\n\n\te.POST(&quot;/upload&quot;, func(c echo.Context) error {\n\t\tfile, err := c.FormFile(&quot;file&quot;)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer src.Close()\n\t\tfilename := c.QueryParam(&quot;filename&quot;)\n\t\tif filename == &quot;&quot; {\n\t\t\tfilename = file.Filename\n\t\t}\n\n\t\tfullName := path.Join(uploadDir, filename)\n\t\t// Destination\n\t\tdst, err := os.Create(fullName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer dst.Close()\n\n\t\t// Copy\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn c.HTML(http.StatusOK, fmt.Sprintf(`&lt;h2&gt;Uploaded successfully!&lt;/h2&gt;&lt;br/&gt;\n&lt;a href=&#39;/&#39;&gt;Home&lt;/a&gt;&lt;br/&gt;\n&lt;a href=&#39;/download?filename=%s&#39;&gt;Download&lt;/a&gt;&lt;br/&gt;\n`, filename))\n\t}, cyberpocAuth)\n\n\t_, err := os.Stat(uploadDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\t_, err = os.Stat(sessionDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(sessionDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 9
  },
  {
    "id": "44b4b205-2fb1-4ecf-b6a5-46f836130452",
    "name": "偷\uD83D\uDC14盗\uD83D\uDC36",
    "description": "### 题目背景\n\n你是一名网络安全专家，最近收到了一份来自某政府机构的委托，窃取位于 /cyberpoc/flag 的重要文件。\n\n### 源码\n\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"strings\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc writeFile(filename string, content []byte) error {\n\t_, err := os.Stat(filename)\n\tif err == nil {\n\t\t_ = os.Remove(filename)\n\t}\n\n\treturn os.WriteFile(filename, content, os.ModePerm)\n}\n\nfunc main() {\n\n\tconst uploadDir = \"files\"\n\tconst indexHtml = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Upload | CyberPoC</title>\n</head>\n<body>\n<H1>CyberPoC Upload</H1>\n\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"file\">\n    <button type=\"submit\">Upload</button>\n</form>\n</body>\n</html>`\n\n\te := echo.New()\n\te.Use(middleware.Gzip())\n\te.Debug = true\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.GET(\"/download\", func(c echo.Context) error {\n\t\tfilename := c.QueryParam(\"filename\")\n\t\tfilename = strings.ReplaceAll(filename, `/`, ``)\n\t\tfilename = strings.ReplaceAll(filename, `\\`, ``)\n\t\treturn c.File(path.Join(uploadDir, filename))\n\t})\n\n\te.POST(\"/upload\", func(c echo.Context) error {\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer src.Close()\n\t\tfilename := c.QueryParam(\"filename\")\n\t\tif filename == \"\" {\n\t\t\tfilename = file.Filename\n\t\t}\n\n\t\tfullName := path.Join(uploadDir, filename)\n\t\t// Destination\n\t\tdst, err := os.Create(fullName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer dst.Close()\n\n\t\t// Copy\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Detect virus\n\t\tcmd := exec.Command(\"sh\", \"detect_virus.sh\", fullName)\n\t\tvar out bytes.Buffer\n\t\tvar stderr bytes.Buffer\n\t\tcmd.Stdout = &out\n\t\tcmd.Stderr = &stderr\n\t\terr = cmd.Run()\n\t\tif err != nil {\n\t\t\treturn c.String(http.StatusInternalServerError, fmt.Sprintf(\"err: %s, stderr: %s\", err.Error(), stderr.String()))\n\t\t}\n\n\t\treturn c.HTML(http.StatusOK, fmt.Sprintf(`<h2>Uploaded successfully!</h2><br/>\n<a href='/'>Home</a><br/>\n<a href='/download?filename=%s'>Download</a><br/>\n`, filename))\n\t})\n\n\t_, err := os.Stat(uploadDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\tflag := os.Getenv(\"flag\")\n\tif err := writeFile(\"flag\", []byte(flag)); err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\tif err := writeFile(\"detect_virus.sh\", []byte(\"echo passed\")); err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n```",
    "category": "audit",
    "difficulty": "hard",
    "points": 3,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "d681fed2-c7f8-11ed-8d7d-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1671577740000,
    "updated_at": 1756867452845,
    "html": "<h3>题目背景</h3>\n<p>你是一名网络安全专家，最近收到了一份来自某政府机构的委托，窃取位于 /cyberpoc/flag 的重要文件。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;fmt&quot;\n\t&quot;io&quot;\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\t&quot;os/exec&quot;\n\t&quot;path&quot;\n\t&quot;strings&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\nfunc writeFile(filename string, content []byte) error {\n\t_, err := os.Stat(filename)\n\tif err == nil {\n\t\t_ = os.Remove(filename)\n\t}\n\n\treturn os.WriteFile(filename, content, os.ModePerm)\n}\n\nfunc main() {\n\n\tconst uploadDir = &quot;files&quot;\n\tconst indexHtml = `&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Upload | CyberPoC&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;H1&gt;CyberPoC Upload&lt;/H1&gt;\n\n&lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;\n    &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;\n    &lt;button type=&quot;submit&quot;&gt;Upload&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;`\n\n\te := echo.New()\n\te.Use(middleware.Gzip())\n\te.Debug = true\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.GET(&quot;/download&quot;, func(c echo.Context) error {\n\t\tfilename := c.QueryParam(&quot;filename&quot;)\n\t\tfilename = strings.ReplaceAll(filename, `/`, ``)\n\t\tfilename = strings.ReplaceAll(filename, `\\`, ``)\n\t\treturn c.File(path.Join(uploadDir, filename))\n\t})\n\n\te.POST(&quot;/upload&quot;, func(c echo.Context) error {\n\t\tfile, err := c.FormFile(&quot;file&quot;)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer src.Close()\n\t\tfilename := c.QueryParam(&quot;filename&quot;)\n\t\tif filename == &quot;&quot; {\n\t\t\tfilename = file.Filename\n\t\t}\n\n\t\tfullName := path.Join(uploadDir, filename)\n\t\t// Destination\n\t\tdst, err := os.Create(fullName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer dst.Close()\n\n\t\t// Copy\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t// Detect virus\n\t\tcmd := exec.Command(&quot;sh&quot;, &quot;detect_virus.sh&quot;, fullName)\n\t\tvar out bytes.Buffer\n\t\tvar stderr bytes.Buffer\n\t\tcmd.Stdout = &amp;out\n\t\tcmd.Stderr = &amp;stderr\n\t\terr = cmd.Run()\n\t\tif err != nil {\n\t\t\treturn c.String(http.StatusInternalServerError, fmt.Sprintf(&quot;err: %s, stderr: %s&quot;, err.Error(), stderr.String()))\n\t\t}\n\n\t\treturn c.HTML(http.StatusOK, fmt.Sprintf(`&lt;h2&gt;Uploaded successfully!&lt;/h2&gt;&lt;br/&gt;\n&lt;a href=&#39;/&#39;&gt;Home&lt;/a&gt;&lt;br/&gt;\n&lt;a href=&#39;/download?filename=%s&#39;&gt;Download&lt;/a&gt;&lt;br/&gt;\n`, filename))\n\t})\n\n\t_, err := os.Stat(uploadDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\tflag := os.Getenv(&quot;flag&quot;)\n\tif err := writeFile(&quot;flag&quot;, []byte(flag)); err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\tif err := writeFile(&quot;detect_virus.sh&quot;, []byte(&quot;echo passed&quot;)); err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 6
  },
  {
    "id": "bb4c6497-d9a0-11ed-8a98-525400a7f0d4",
    "name": "敲山震虎",
    "description": "### 题目背景\n\n你是一名网络安全专家，在参加某次安全会议时听到了一个案例，把它做成了一个环境供自己测试。\n\n### 源码\n\n``` go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"crypto/md5\"\n\trealRand \"crypto/rand\"\n\t\"encoding/gob\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"math/big\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/PuerkitoBio/goquery\"\n\t\"github.com/go-resty/resty/v2\"\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nconst sessionDir = \"sessions\"\n\ntype User struct {\n\tUsername string\n\tPassword string\n}\n\nvar user = User{\n\tUsername: \"*****\", // 此处隐藏真实的账号和密码\n\tPassword: \"*****\",\n}\n\nfunc cyberpocAuth(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\t_, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn next(c)\n\t}\n}\n\nfunc getUser(c echo.Context) (u User, err error) {\n\tcookie, err := c.Cookie(\"session\")\n\tif err != nil {\n\t\treturn\n\t}\n\tif cookie.Value == \"\" {\n\t\terr = errors.New(\"not Login\")\n\t\treturn\n\t}\n\treturn getUserBySession(cookie.Value)\n}\n\nfunc getUserBySession(session string) (u User, err error) {\n\tvar f = path.Join(sessionDir, session)\n\tb, err := ioutil.ReadFile(f)\n\tif err != nil {\n\t\treturn\n\t}\n\tdecoder := gob.NewDecoder(bytes.NewReader(b))\n\terr = decoder.Decode(&u)\n\treturn\n}\n\nconst loginHtml = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>CyberPoC</title>\n</head>\n<body>\n<H1>CyberPoC</H1>\n\n<form action=\"/login\" method=\"post\" enctype=\"application/x-www-form-urlencoded\">\n <label for=\"uname\"><b>Username</b></label>\n    <input type=\"hidden\" name=\"csrf\" value=\"%s\" required>\n\n    <input type=\"text\" placeholder=\"Enter Username\" name=\"username\" required>\n\n    <label for=\"psw\"><b>Password</b></label>\n    <input type=\"password\" placeholder=\"Enter Password\" name=\"password\" required>\n    <button type=\"submit\">Login</button>\n</form>\n</body>\n</html>`\n\nfunc randomByte(l int) []byte {\n\toutput := make([]byte, l)\n\trand.Read(output)\n\treturn output\n}\n\nfunc md5V2(str string) string {\n\tdata := []byte(str)\n\thas := md5.Sum(data)\n\tmd5str := fmt.Sprintf(\"%x\", has)\n\treturn md5str\n}\n\nfunc randomStr() string {\n\treturn md5V2(string(randomByte(32)))\n}\n\nfunc main() {\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\t// 限制一秒只能发起5个请求\n\te.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(5)))\n\n\t// 模拟系统运行了一段时间\n\tresult1, _ := realRand.Int(realRand.Reader, big.NewInt(100000))\n\tnow := time.Now().UTC().Unix() - result1.Int64()\n\tlog.Println(\"时间因子是:\", now)\n\trand.Seed(now)\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tu, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn c.HTML(200, fmt.Sprintf(loginHtml, randomStr()))\n\t\t}\n\t\treturn c.HTML(200, `<div> Hello: `+u.Username+`</div> <br/> <a href=\" \">FLAG</a >`)\n\t})\n\n\te.GET(\"/flag\", func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, os.Getenv(\"flag\"))\n\t}, cyberpocAuth)\n\n\te.POST(\"/login\", func(c echo.Context) error {\n\t\tusername := c.FormValue(\"username\")\n\t\tpassword := c.FormValue(\"password\")\n\t\tcsrf := c.FormValue(\"csrf\")\n\n\t\tif user.Username != username || user.Password != password {\n\t\t\treturn c.String(400, \"username or password is wrong\")\n\t\t}\n\t\t// 获取随机数\n\t\tresult, _ := realRand.Int(realRand.Reader, big.NewInt(10*10))\n\t\tvar tokens = []string{csrf}\n\t\tfor i := int64(0); i < result.Int64(); i++ {\n\t\t\ttokens = append(tokens, randomStr())\n\t\t}\n\t\tv := strings.Join(tokens, \"-\")\n\t\tlog.Println(\"用户登录，token=\", v)\n\n\t\tsession := md5V2(v)\n\t\tvar f = path.Join(sessionDir, session)\n\n\t\tfile, err := os.Create(f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tencoder := gob.NewEncoder(file)\n\t\tif err := encoder.Encode(User{\n\t\t\tUsername: username,\n\t\t}); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tcookie := http.Cookie{\n\t\t\tName:    \"session\",\n\t\t\tValue:   session,\n\t\t\tPath:    \"/\",\n\t\t\tDomain:  \"\",\n\t\t\tExpires: time.Now().Add(time.Hour),\n\t\t}\n\n\t\ttime.AfterFunc(time.Hour, func() {\n\t\t\t_ = os.RemoveAll(f)\n\t\t})\n\n\t\tc.SetCookie(&cookie)\n\t\tlog.Println(\"用户登录成功，session=\", session)\n\t\treturn c.Redirect(302, \"/\")\n\t})\n\n\t// 模拟用户登录\n\tgo func() {\n\t\tticker := time.NewTicker(time.Minute)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ticker.C:\n\t\t\t\tSimulatedLogin()\n\t\t\tdefault:\n\n\t\t\t}\n\t\t}\n\t}()\n\n\t_, err := os.Stat(sessionDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(sessionDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n\nfunc SimulatedLogin() {\n\t// Create a Resty Client\n\tclient := resty.New()\n\n\tresp, err := client.R().\n\t\tEnableTrace().\n\t\tGet(\"http://127.0.0.1\")\n\n\tif err != nil {\n\t\tlog.Fatal(\"get index html err\", err.Error())\n\t\treturn\n\t}\n\n\t// 使用 goquery 解析 HTML 页面\n\tdoc, err := goquery.NewDocumentFromReader(bytes.NewReader(resp.Body()))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\n\t// 获取 CSRF 值\n\tcsrfValue := doc.Find(\"input[name='csrf']\").AttrOr(\"value\", \"\")\n\tfmt.Println(\"CSRF value:\", csrfValue)\n\n\tformData := map[string]string{\n\t\t\"username\": user.Username,\n\t\t\"password\": user.Password,\n\t\t\"csrf\":     csrfValue,\n\t}\n\n\tresp, err = client.R().\n\t\tSetFormData(formData).\n\t\tPost(`http://127.0.0.1/login`)\n\tif err != nil {\n\t\tlog.Fatal(\"login err\", err.Error())\n\t\treturn\n\t}\n\n\tresult := string(resp.Body())\n\tif !strings.Contains(result, user.Username) {\n\t\tlog.Fatal(\"login failed\", result)\n\t\treturn\n\t}\n\n\tfmt.Println(\"登录成功\")\n}\n\n```",
    "category": "audit",
    "difficulty": "hard",
    "points": 5,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "3654a50c-d9a0-11ed-8a98-525400a7f0d4",
    "exposed": "80",
    "duration": 30,
    "created_at": 1681351987869,
    "updated_at": 1756867581816,
    "html": "<h3>题目背景</h3>\n<p>你是一名网络安全专家，在参加某次安全会议时听到了一个案例，把它做成了一个环境供自己测试。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t&quot;bytes&quot;\n\t&quot;crypto/md5&quot;\n\trealRand &quot;crypto/rand&quot;\n\t&quot;encoding/gob&quot;\n\t&quot;errors&quot;\n\t&quot;fmt&quot;\n\t&quot;io/ioutil&quot;\n\t&quot;log&quot;\n\t&quot;math/big&quot;\n\t&quot;math/rand&quot;\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\t&quot;path&quot;\n\t&quot;strings&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com/PuerkitoBio/goquery&quot;\n\t&quot;github.com/go-resty/resty/v2&quot;\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\nconst sessionDir = &quot;sessions&quot;\n\ntype User struct {\n\tUsername string\n\tPassword string\n}\n\nvar user = User{\n\tUsername: &quot;*****&quot;, // 此处隐藏真实的账号和密码\n\tPassword: &quot;*****&quot;,\n}\n\nfunc cyberpocAuth(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\t_, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn next(c)\n\t}\n}\n\nfunc getUser(c echo.Context) (u User, err error) {\n\tcookie, err := c.Cookie(&quot;session&quot;)\n\tif err != nil {\n\t\treturn\n\t}\n\tif cookie.Value == &quot;&quot; {\n\t\terr = errors.New(&quot;not Login&quot;)\n\t\treturn\n\t}\n\treturn getUserBySession(cookie.Value)\n}\n\nfunc getUserBySession(session string) (u User, err error) {\n\tvar f = path.Join(sessionDir, session)\n\tb, err := ioutil.ReadFile(f)\n\tif err != nil {\n\t\treturn\n\t}\n\tdecoder := gob.NewDecoder(bytes.NewReader(b))\n\terr = decoder.Decode(&amp;u)\n\treturn\n}\n\nconst loginHtml = `&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;CyberPoC&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;H1&gt;CyberPoC&lt;/H1&gt;\n\n&lt;form action=&quot;/login&quot; method=&quot;post&quot; enctype=&quot;application/x-www-form-urlencoded&quot;&gt;\n &lt;label for=&quot;uname&quot;&gt;&lt;b&gt;Username&lt;/b&gt;&lt;/label&gt;\n    &lt;input type=&quot;hidden&quot; name=&quot;csrf&quot; value=&quot;%s&quot; required&gt;\n\n    &lt;input type=&quot;text&quot; placeholder=&quot;Enter Username&quot; name=&quot;username&quot; required&gt;\n\n    &lt;label for=&quot;psw&quot;&gt;&lt;b&gt;Password&lt;/b&gt;&lt;/label&gt;\n    &lt;input type=&quot;password&quot; placeholder=&quot;Enter Password&quot; name=&quot;password&quot; required&gt;\n    &lt;button type=&quot;submit&quot;&gt;Login&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;`\n\nfunc randomByte(l int) []byte {\n\toutput := make([]byte, l)\n\trand.Read(output)\n\treturn output\n}\n\nfunc md5V2(str string) string {\n\tdata := []byte(str)\n\thas := md5.Sum(data)\n\tmd5str := fmt.Sprintf(&quot;%x&quot;, has)\n\treturn md5str\n}\n\nfunc randomStr() string {\n\treturn md5V2(string(randomByte(32)))\n}\n\nfunc main() {\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\t// 限制一秒只能发起5个请求\n\te.Use(middleware.RateLimiter(middleware.NewRateLimiterMemoryStore(5)))\n\n\t// 模拟系统运行了一段时间\n\tresult1, _ := realRand.Int(realRand.Reader, big.NewInt(100000))\n\tnow := time.Now().UTC().Unix() - result1.Int64()\n\tlog.Println(&quot;时间因子是:&quot;, now)\n\trand.Seed(now)\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\tu, err := getUser(c)\n\t\tif err != nil {\n\t\t\treturn c.HTML(200, fmt.Sprintf(loginHtml, randomStr()))\n\t\t}\n\t\treturn c.HTML(200, `&lt;div&gt; Hello: `+u.Username+`&lt;/div&gt; &lt;br/&gt; &lt;a href=&quot; &quot;&gt;FLAG&lt;/a &gt;`)\n\t})\n\n\te.GET(&quot;/flag&quot;, func(c echo.Context) error {\n\t\treturn c.String(http.StatusOK, os.Getenv(&quot;flag&quot;))\n\t}, cyberpocAuth)\n\n\te.POST(&quot;/login&quot;, func(c echo.Context) error {\n\t\tusername := c.FormValue(&quot;username&quot;)\n\t\tpassword := c.FormValue(&quot;password&quot;)\n\t\tcsrf := c.FormValue(&quot;csrf&quot;)\n\n\t\tif user.Username != username || user.Password != password {\n\t\t\treturn c.String(400, &quot;username or password is wrong&quot;)\n\t\t}\n\t\t// 获取随机数\n\t\tresult, _ := realRand.Int(realRand.Reader, big.NewInt(10*10))\n\t\tvar tokens = []string{csrf}\n\t\tfor i := int64(0); i &lt; result.Int64(); i++ {\n\t\t\ttokens = append(tokens, randomStr())\n\t\t}\n\t\tv := strings.Join(tokens, &quot;-&quot;)\n\t\tlog.Println(&quot;用户登录，token=&quot;, v)\n\n\t\tsession := md5V2(v)\n\t\tvar f = path.Join(sessionDir, session)\n\n\t\tfile, err := os.Create(f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tencoder := gob.NewEncoder(file)\n\t\tif err := encoder.Encode(User{\n\t\t\tUsername: username,\n\t\t}); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tcookie := http.Cookie{\n\t\t\tName:    &quot;session&quot;,\n\t\t\tValue:   session,\n\t\t\tPath:    &quot;/&quot;,\n\t\t\tDomain:  &quot;&quot;,\n\t\t\tExpires: time.Now().Add(time.Hour),\n\t\t}\n\n\t\ttime.AfterFunc(time.Hour, func() {\n\t\t\t_ = os.RemoveAll(f)\n\t\t})\n\n\t\tc.SetCookie(&amp;cookie)\n\t\tlog.Println(&quot;用户登录成功，session=&quot;, session)\n\t\treturn c.Redirect(302, &quot;/&quot;)\n\t})\n\n\t// 模拟用户登录\n\tgo func() {\n\t\tticker := time.NewTicker(time.Minute)\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase &lt;-ticker.C:\n\t\t\t\tSimulatedLogin()\n\t\t\tdefault:\n\n\t\t\t}\n\t\t}\n\t}()\n\n\t_, err := os.Stat(sessionDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(sessionDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n\nfunc SimulatedLogin() {\n\t// Create a Resty Client\n\tclient := resty.New()\n\n\tresp, err := client.R().\n\t\tEnableTrace().\n\t\tGet(&quot;http://127.0.0.1&quot;)\n\n\tif err != nil {\n\t\tlog.Fatal(&quot;get index html err&quot;, err.Error())\n\t\treturn\n\t}\n\n\t// 使用 goquery 解析 HTML 页面\n\tdoc, err := goquery.NewDocumentFromReader(bytes.NewReader(resp.Body()))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\n\t// 获取 CSRF 值\n\tcsrfValue := doc.Find(&quot;input[name=&#39;csrf&#39;]&quot;).AttrOr(&quot;value&quot;, &quot;&quot;)\n\tfmt.Println(&quot;CSRF value:&quot;, csrfValue)\n\n\tformData := map[string]string{\n\t\t&quot;username&quot;: user.Username,\n\t\t&quot;password&quot;: user.Password,\n\t\t&quot;csrf&quot;:     csrfValue,\n\t}\n\n\tresp, err = client.R().\n\t\tSetFormData(formData).\n\t\tPost(`http://127.0.0.1/login`)\n\tif err != nil {\n\t\tlog.Fatal(&quot;login err&quot;, err.Error())\n\t\treturn\n\t}\n\n\tresult := string(resp.Body())\n\tif !strings.Contains(result, user.Username) {\n\t\tlog.Fatal(&quot;login failed&quot;, result)\n\t\treturn\n\t}\n\n\tfmt.Println(&quot;登录成功&quot;)\n}\n</code></pre>\n",
    "sort": 1
  },
  {
    "id": "44347312-88b9-11ed-b0c9-525400a7f0d4",
    "name": "古今一辙",
    "description": "### 题目背景\n\n你是一名网络安全专家，最近收到了一份来自某政府机构的文件，该文件被加密了。你需要编写一个程序来解密文件，并将其中的信息提取出来。\n\n### 源码\n\n```go\npackage main\n\nimport (\n\t\"crypto/aes\"\n\t\"crypto/cipher\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nfunc randomByte(l int) []byte {\n\toutput := make([]byte, l)\n\trand.Read(output)\n\treturn output\n}\n\nfunc encryption(plaintext []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tciphertext := make([]byte, len(plaintext))\n\tcipher.NewCFBEncrypter(block, iv).XORKeyStream(ciphertext, plaintext)\n\treturn ciphertext, nil\n}\n\nvar (\n\tkey []byte\n\tiv  []byte\n)\n\nfunc main() {\n\tnow := time.Now().Unix()\n\trand.Seed(now)\n\tkey = randomByte(16)\n\tiv = randomByte(aes.BlockSize)\n\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tflag := os.Getenv(\"flag\")\n\n\t\tciphertext, err := encryption([]byte(flag))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tencodedCiphertext := base64.StdEncoding.EncodeToString(ciphertext)\n\n\t\treturn c.HTML(http.StatusOK, fmt.Sprintf(`Ciphertext: %s`, encodedCiphertext))\n\t})\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "e3f69813-c7f8-11ed-8d7d-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1672456481296,
    "updated_at": 1756996978204,
    "html": "<h3>题目背景</h3>\n<p>你是一名网络安全专家，最近收到了一份来自某政府机构的文件，该文件被加密了。你需要编写一个程序来解密文件，并将其中的信息提取出来。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t&quot;crypto/aes&quot;\n\t&quot;crypto/cipher&quot;\n\t&quot;encoding/base64&quot;\n\t&quot;fmt&quot;\n\t&quot;math/rand&quot;\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\nfunc randomByte(l int) []byte {\n\toutput := make([]byte, l)\n\trand.Read(output)\n\treturn output\n}\n\nfunc encryption(plaintext []byte) ([]byte, error) {\n\tblock, err := aes.NewCipher(key)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tciphertext := make([]byte, len(plaintext))\n\tcipher.NewCFBEncrypter(block, iv).XORKeyStream(ciphertext, plaintext)\n\treturn ciphertext, nil\n}\n\nvar (\n\tkey []byte\n\tiv  []byte\n)\n\nfunc main() {\n\tnow := time.Now().Unix()\n\trand.Seed(now)\n\tkey = randomByte(16)\n\tiv = randomByte(aes.BlockSize)\n\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\tflag := os.Getenv(&quot;flag&quot;)\n\n\t\tciphertext, err := encryption([]byte(flag))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tencodedCiphertext := base64.StdEncoding.EncodeToString(ciphertext)\n\n\t\treturn c.HTML(http.StatusOK, fmt.Sprintf(`Ciphertext: %s`, encodedCiphertext))\n\t})\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 10
  },
  {
    "id": "a25889a8-86a3-11ed-a6d5-525400a7f0d4",
    "name": "偷梁换柱",
    "description": "### 题目背景\n\n你是一名网络安全专家，最近收到了一份来自某政府机构的委托，窃取位于内网 http://127.0.0.1:8000/flag 的重要文件，但该文件有非常严格的防护手段，你需要隐藏自己，避免被发现。\n\n### 源码\n\n```go\npackage main\n\nimport (\n\t_ \"embed\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar blockList = []string{\"127.0.0.1\", \"localhost\"}\n\nfunc cyberpocSSRF(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\ttarget := c.QueryParam(\"target\")\n\t\t_url, err := url.Parse(strings.TrimSpace(target))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\thostname := _url.Hostname()\n\t\tfor _, block := range blockList {\n\t\t\tif hostname == block {\n\t\t\t\treturn c.String(http.StatusBadRequest, \"Not allowed!\")\n\t\t\t}\n\t\t}\n\n\t\treturn next(c)\n\t}\n}\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\n\tgo func() {\n\t\tdebug := echo.New()\n\t\tdebug.GET(\"/flag\", func(c echo.Context) error {\n\t\t\thtml := fmt.Sprintf(`FLAG: %s`, os.Getenv(\"flag\"))\n\t\t\treturn c.HTML(http.StatusOK, html)\n\t\t})\n\t\tdebug.Logger.Fatal(debug.Start(\"127.0.0.1:8000\"))\n\t}()\n\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\te.GET(\"/get-file\", func(c echo.Context) error {\n\t\ttarget := c.QueryParam(\"target\")\n\t\tresp, err := http.Get(strings.TrimSpace(target))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tbytes, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = c.Response().Write(bytes)\n\t\treturn err\n\t}, cyberpocSSRF)\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "f0c420ef-c7f8-11ed-8d7d-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1672227287985,
    "updated_at": 1756831371240,
    "html": "<h3>题目背景</h3>\n<p>你是一名网络安全专家，最近收到了一份来自某政府机构的委托，窃取位于内网 <a href=\"http://127.0.0.1:8000/flag\">http://127.0.0.1:8000/flag</a> 的重要文件，但该文件有非常严格的防护手段，你需要隐藏自己，避免被发现。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t_ &quot;embed&quot;\n\t&quot;fmt&quot;\n\t&quot;io&quot;\n\t&quot;net/http&quot;\n\t&quot;net/url&quot;\n\t&quot;os&quot;\n\t&quot;strings&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\nvar blockList = []string{&quot;127.0.0.1&quot;, &quot;localhost&quot;}\n\nfunc cyberpocSSRF(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\ttarget := c.QueryParam(&quot;target&quot;)\n\t\t_url, err := url.Parse(strings.TrimSpace(target))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\thostname := _url.Hostname()\n\t\tfor _, block := range blockList {\n\t\t\tif hostname == block {\n\t\t\t\treturn c.String(http.StatusBadRequest, &quot;Not allowed!&quot;)\n\t\t\t}\n\t\t}\n\n\t\treturn next(c)\n\t}\n}\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\n\tgo func() {\n\t\tdebug := echo.New()\n\t\tdebug.GET(&quot;/flag&quot;, func(c echo.Context) error {\n\t\t\thtml := fmt.Sprintf(`FLAG: %s`, os.Getenv(&quot;flag&quot;))\n\t\t\treturn c.HTML(http.StatusOK, html)\n\t\t})\n\t\tdebug.Logger.Fatal(debug.Start(&quot;127.0.0.1:8000&quot;))\n\t}()\n\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\te.GET(&quot;/get-file&quot;, func(c echo.Context) error {\n\t\ttarget := c.QueryParam(&quot;target&quot;)\n\t\tresp, err := http.Get(strings.TrimSpace(target))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tbytes, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = c.Response().Write(bytes)\n\t\treturn err\n\t}, cyberpocSSRF)\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 19
  },
  {
    "id": "73c700e4-dc6a-11ed-bd7c-525400a7f0d4",
    "name": "抛砖引玉",
    "description": "### 题目背景\n\n你是一名脚本小子，朋友说他的电脑被黑了，黑客勒索V他50，求助你帮忙处理一下。\n\n### 源码\n\n``` go\n// letter.html\n{{ range $x := .letters }}\n<tr>\n    <td class=\"px-4 py-2 text-gray-700\">\n        {{ $x.Mail }}\n    </td>\n    <td class=\"px-4 py-2 text-gray-700\">\n        {{ $x.Title }}\n    </td>\n    <td class=\"px-4 py-2 text-gray-700\">\n        {{ $x.Content }}\n    </td>\n</tr>\n{{ end }}\n\n// main.go\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Gzip())\n    e.Use(middleware.Logger())\n    e.Debug = true\n\n    e.Renderer = &cyberpoc.TemplateRenderer{\n        Templates: template.Must(template.ParseGlob(\"*.html\")),\n    }\n\n    letterRepo := new(cyberpoc.LetterRepo)\n\n    e.GET(\"/\", func(c echo.Context) error {\n\n        return c.Render(http.StatusOK, `index.html`, map[string]interface{}{})\n    })\n\n    e.POST(\"/letter\", func(c echo.Context) error {\n        mail := c.FormValue(\"mail\")\n        title := c.FormValue(\"title\")\n        content := c.FormValue(\"content\")\n        letter := cyberpoc.Letter{\n            Mail:    mail,\n            Title:   title,\n            Content: template.HTML(content),\n        }\n        letterRepo.Save(letter)\n        return c.JSON(200, map[string]string{})\n    })\n\n    e.GET(\"/letters\", func(c echo.Context) error {\n        letters := letterRepo.List()\n\n        return c.Render(http.StatusOK, \"letter.html\", map[string]interface{}{\n            \"letters\": letters,\n        })\n    })\n\n    ticker := time.NewTicker(time.Second * 5)\n    // 定时器、访问地址、cookies\n    go cyberpoc.RunChrome(ticker, \"http://localhost/letters\", map[string]string{\n        \"token\": os.Getenv(\"flag\"),\n    })\n\n    e.Logger.Fatal(e.Start(\":80\"))\n}\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "72caa803-dc68-11ed-bd7c-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1681658528541,
    "updated_at": 1756831508200,
    "html": "<h3>题目背景</h3>\n<p>你是一名脚本小子，朋友说他的电脑被黑了，黑客勒索V他50，求助你帮忙处理一下。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">// letter.html\n{{ range $x := .letters }}\n&lt;tr&gt;\n    &lt;td class=&quot;px-4 py-2 text-gray-700&quot;&gt;\n        {{ $x.Mail }}\n    &lt;/td&gt;\n    &lt;td class=&quot;px-4 py-2 text-gray-700&quot;&gt;\n        {{ $x.Title }}\n    &lt;/td&gt;\n    &lt;td class=&quot;px-4 py-2 text-gray-700&quot;&gt;\n        {{ $x.Content }}\n    &lt;/td&gt;\n&lt;/tr&gt;\n{{ end }}\n\n// main.go\nfunc main() {\n    e := echo.New()\n    e.Use(middleware.Gzip())\n    e.Use(middleware.Logger())\n    e.Debug = true\n\n    e.Renderer = &amp;cyberpoc.TemplateRenderer{\n        Templates: template.Must(template.ParseGlob(&quot;*.html&quot;)),\n    }\n\n    letterRepo := new(cyberpoc.LetterRepo)\n\n    e.GET(&quot;/&quot;, func(c echo.Context) error {\n\n        return c.Render(http.StatusOK, `index.html`, map[string]interface{}{})\n    })\n\n    e.POST(&quot;/letter&quot;, func(c echo.Context) error {\n        mail := c.FormValue(&quot;mail&quot;)\n        title := c.FormValue(&quot;title&quot;)\n        content := c.FormValue(&quot;content&quot;)\n        letter := cyberpoc.Letter{\n            Mail:    mail,\n            Title:   title,\n            Content: template.HTML(content),\n        }\n        letterRepo.Save(letter)\n        return c.JSON(200, map[string]string{})\n    })\n\n    e.GET(&quot;/letters&quot;, func(c echo.Context) error {\n        letters := letterRepo.List()\n\n        return c.Render(http.StatusOK, &quot;letter.html&quot;, map[string]interface{}{\n            &quot;letters&quot;: letters,\n        })\n    })\n\n    ticker := time.NewTicker(time.Second * 5)\n    // 定时器、访问地址、cookies\n    go cyberpoc.RunChrome(ticker, &quot;http://localhost/letters&quot;, map[string]string{\n        &quot;token&quot;: os.Getenv(&quot;flag&quot;),\n    })\n\n    e.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 16
  },
  {
    "id": "c4ce7884-1cb0-11ee-8f3a-525400a7f0d4",
    "name": "起死回生",
    "description": "### 题目背景\n\n你是一个网瘾少年，最近疯狂迷恋一款叫做《大富翁》的游戏，每天可以签到获取金钱，同时买东西也需要花钱，你想要买的东西比较贵，需要签到很久才能有足够的金钱购买，但是你发现了一个漏洞。\n\n### 源码\n\n``` go\nfunc (r *Account) Withdraw(amount int64) int64 {\n\tif amount <= r.Balance {\n\t\tmoney := r.Balance - amount\n\t\tr.Balance = money\n\t\treturn money\n\t}\n\treturn 0\n}\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "aaa1d747-1cb0-11ee-8f3a-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1688725603675,
    "updated_at": 1756867426280,
    "html": "<h3>题目背景</h3>\n<p>你是一个网瘾少年，最近疯狂迷恋一款叫做《大富翁》的游戏，每天可以签到获取金钱，同时买东西也需要花钱，你想要买的东西比较贵，需要签到很久才能有足够的金钱购买，但是你发现了一个漏洞。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">func (r *Account) Withdraw(amount int64) int64 {\n\tif amount &lt;= r.Balance {\n\t\tmoney := r.Balance - amount\n\t\tr.Balance = money\n\t\treturn money\n\t}\n\treturn 0\n}\n</code></pre>\n",
    "sort": 7
  },
  {
    "id": "1f70cb72-db4e-11ed-8a98-525400a7f0d4",
    "name": "釜底抽薪",
    "description": "### 题目背景\n\n你是一名刚入门的网络安全工程师，来到一个大名鼎鼎的网站来观摩师傅们的战绩排名，但是发现了一些问题。\n\n### 源码\n\n``` go\npackage main\n\nimport (\n        // ...\n\n        \"github.com/labstack/echo/v4\"\n        \"github.com/labstack/echo/v4/middleware\"\n)\n\nconst sessionDir = \"sessions\"\n\nconst indexHtml = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Rank | CyberPoC</title>\n</head>\n<body>\n<H1>CyberPoC Rank</H1> \n<a href=\"/login\"> Login </a>\n<table>\n    <tr>\n        <th>Index</th>\n        <th>Username</th>\n        <th>Score</th>\n        <th>Detail</th>\n    </tr>\n    {{ range .Items}}\n        <tr>\n            <td>{{ .Index }}</td>\n            <td>{{ .Username }}</td>\n            <td>{{ .Score }}</td>\n            <td><a href=\"/users/{{ .Username }}?csrf={{ $.CSRF }}\">go</td>\n        </tr>\n    {{ end}}\n</table>\n</body>\n</html>`\n\nconst loginHtml = `...`\n\ntype Data struct {\n        Items []User\n        CSRF  string\n}\n\ntype User struct {\n        Index    int\n        Username string\n        Password string\n        Score    int\n}\n\n\nfunc md5X(str string) string {\n        h := md5.New()\n        h.Write([]byte(str))\n        return hex.EncodeToString(h.Sum(nil))\n}\n\nfunc getUsers() []User {\n        //...\n}\n\nfunc getUser(c echo.Context) (u User, err error) {\n        // ...\n}\n\nfunc getUserBySession(session string) (u User, err error) {\n        // ...\n}\n\nfunc cyberpocAuth(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n                _, err := getUser(c)\n                if err != nil {\n                        return err\n                }\n                return next(c)\n        }\n}\n\nfunc main() {\n        e := echo.New()\n        e.Debug = true\n        e.Use(middleware.Gzip())\n\n        e.GET(\"/\", func(c echo.Context) error {\n                t, err := template.New(\"index\").Parse(indexHtml)\n                if err != nil {\n                        return err\n                }\n\n                data := Data{\n                        Items: getUsers(),\n                        CSRF:  md5X(strconv.FormatInt(time.Now().UnixMicro(), 10)),\n                }\n                return t.Execute(c.Response(), data)\n        })\n\n        e.GET(\"/login\", func(c echo.Context) error {\n                return c.HTML(200, loginHtml)\n        })\n\n        e.GET(\"/users/:username\", func(c echo.Context) error {\n                username := c.Param(\"username\")\n                csrf := c.QueryParam(\"csrf\")\n\n                var temp = fmt.Sprintf(`<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Rank | CyberPoC</title>\n</head>\n<body>\n<H1>CyberPoC Rank</H1>\n<br/>\n<p>You are looking for: %s</p>\n\n<br/>\n<p><strong> Username: {{ .Username }} </strong></p>\n<p><strong>    Score: {{ .Score }} </strong></p>\n<div style=\"display: none;\">%s<div>\n</body>\n</html>`, username, csrf)\n\n                t, err := template.New(\"user\").Parse(temp)\n\n                if err != nil {\n                        return err\n                }\n\n                var u User\n                users := getUsers()\n                for _, user := range users {\n                        if user.Username == username {\n                                u = user\n                                break\n                        }\n                }\n\n                return t.Execute(c.Response(), &u)\n        })\n\n        e.GET(\"/flag\", func(c echo.Context) error {\n                return c.String(http.StatusOK, os.Getenv(\"flag\"))\n        }, cyberpocAuth)\n\n        e.POST(\"/login\", func(c echo.Context) error {\n                username := c.FormValue(\"username\")\n                password := c.FormValue(\"password\")\n\n                var u User\n                users := getUsers()\n                for _, user := range users {\n                        if user.Username == username {\n                                if md5X(password) == user.Password {\n                                        u = user\n                                        break\n                                }\n                        }\n                }\n                if u.Username == \"\" {\n                        return c.HTML(400, `username or password is wrong.`)\n                }\n\n                session := strconv.FormatInt(time.Now().UnixMicro(), 10)\n                var f = path.Join(sessionDir, session)\n\n                file, err := os.Create(f)\n                if err != nil {\n                        return err\n                }\n\n                encoder := gob.NewEncoder(file)\n                if err := encoder.Encode(u); err != nil {\n                        return err\n                }\n\n                cookie := http.Cookie{\n                        Name:    \"session\",\n                        Value:   session,\n                        Path:    \"/\",\n                        Domain:  \"\",\n                        Expires: time.Now().Add(time.Hour),\n                }\n\n                time.AfterFunc(time.Hour, func() {\n                        _ = os.RemoveAll(f)\n                })\n\n                c.SetCookie(&cookie)\n                return c.Redirect(302, \"/\")\n        })\n\n        _, err := os.Stat(sessionDir)\n        if err != nil {\n                if err := os.MkdirAll(sessionDir, os.ModePerm); err != nil {\n                        e.Logger.Fatal(err)\n                }\n        }\n\n        e.Logger.Fatal(e.Start(\":80\"))\n}\n\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "f25e4097-d869-11ed-b188-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1681218809472,
    "updated_at": 1756867680981,
    "html": "<h3>题目背景</h3>\n<p>你是一名刚入门的网络安全工程师，来到一个大名鼎鼎的网站来观摩师傅们的战绩排名，但是发现了一些问题。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n        // ...\n\n        &quot;github.com/labstack/echo/v4&quot;\n        &quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\nconst sessionDir = &quot;sessions&quot;\n\nconst indexHtml = `&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Rank | CyberPoC&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;H1&gt;CyberPoC Rank&lt;/H1&gt; \n&lt;a href=&quot;/login&quot;&gt; Login &lt;/a&gt;\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th&gt;Index&lt;/th&gt;\n        &lt;th&gt;Username&lt;/th&gt;\n        &lt;th&gt;Score&lt;/th&gt;\n        &lt;th&gt;Detail&lt;/th&gt;\n    &lt;/tr&gt;\n    {{ range .Items}}\n        &lt;tr&gt;\n            &lt;td&gt;{{ .Index }}&lt;/td&gt;\n            &lt;td&gt;{{ .Username }}&lt;/td&gt;\n            &lt;td&gt;{{ .Score }}&lt;/td&gt;\n            &lt;td&gt;&lt;a href=&quot;/users/{{ .Username }}?csrf={{ $.CSRF }}&quot;&gt;go&lt;/td&gt;\n        &lt;/tr&gt;\n    {{ end}}\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;`\n\nconst loginHtml = `...`\n\ntype Data struct {\n        Items []User\n        CSRF  string\n}\n\ntype User struct {\n        Index    int\n        Username string\n        Password string\n        Score    int\n}\n\n\nfunc md5X(str string) string {\n        h := md5.New()\n        h.Write([]byte(str))\n        return hex.EncodeToString(h.Sum(nil))\n}\n\nfunc getUsers() []User {\n        //...\n}\n\nfunc getUser(c echo.Context) (u User, err error) {\n        // ...\n}\n\nfunc getUserBySession(session string) (u User, err error) {\n        // ...\n}\n\nfunc cyberpocAuth(next echo.HandlerFunc) echo.HandlerFunc {\n        return func(c echo.Context) error {\n                _, err := getUser(c)\n                if err != nil {\n                        return err\n                }\n                return next(c)\n        }\n}\n\nfunc main() {\n        e := echo.New()\n        e.Debug = true\n        e.Use(middleware.Gzip())\n\n        e.GET(&quot;/&quot;, func(c echo.Context) error {\n                t, err := template.New(&quot;index&quot;).Parse(indexHtml)\n                if err != nil {\n                        return err\n                }\n\n                data := Data{\n                        Items: getUsers(),\n                        CSRF:  md5X(strconv.FormatInt(time.Now().UnixMicro(), 10)),\n                }\n                return t.Execute(c.Response(), data)\n        })\n\n        e.GET(&quot;/login&quot;, func(c echo.Context) error {\n                return c.HTML(200, loginHtml)\n        })\n\n        e.GET(&quot;/users/:username&quot;, func(c echo.Context) error {\n                username := c.Param(&quot;username&quot;)\n                csrf := c.QueryParam(&quot;csrf&quot;)\n\n                var temp = fmt.Sprintf(`&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Rank | CyberPoC&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;H1&gt;CyberPoC Rank&lt;/H1&gt;\n&lt;br/&gt;\n&lt;p&gt;You are looking for: %s&lt;/p&gt;\n\n&lt;br/&gt;\n&lt;p&gt;&lt;strong&gt; Username: {{ .Username }} &lt;/strong&gt;&lt;/p&gt;\n&lt;p&gt;&lt;strong&gt;    Score: {{ .Score }} &lt;/strong&gt;&lt;/p&gt;\n&lt;div style=&quot;display: none;&quot;&gt;%s&lt;div&gt;\n&lt;/body&gt;\n&lt;/html&gt;`, username, csrf)\n\n                t, err := template.New(&quot;user&quot;).Parse(temp)\n\n                if err != nil {\n                        return err\n                }\n\n                var u User\n                users := getUsers()\n                for _, user := range users {\n                        if user.Username == username {\n                                u = user\n                                break\n                        }\n                }\n\n                return t.Execute(c.Response(), &amp;u)\n        })\n\n        e.GET(&quot;/flag&quot;, func(c echo.Context) error {\n                return c.String(http.StatusOK, os.Getenv(&quot;flag&quot;))\n        }, cyberpocAuth)\n\n        e.POST(&quot;/login&quot;, func(c echo.Context) error {\n                username := c.FormValue(&quot;username&quot;)\n                password := c.FormValue(&quot;password&quot;)\n\n                var u User\n                users := getUsers()\n                for _, user := range users {\n                        if user.Username == username {\n                                if md5X(password) == user.Password {\n                                        u = user\n                                        break\n                                }\n                        }\n                }\n                if u.Username == &quot;&quot; {\n                        return c.HTML(400, `username or password is wrong.`)\n                }\n\n                session := strconv.FormatInt(time.Now().UnixMicro(), 10)\n                var f = path.Join(sessionDir, session)\n\n                file, err := os.Create(f)\n                if err != nil {\n                        return err\n                }\n\n                encoder := gob.NewEncoder(file)\n                if err := encoder.Encode(u); err != nil {\n                        return err\n                }\n\n                cookie := http.Cookie{\n                        Name:    &quot;session&quot;,\n                        Value:   session,\n                        Path:    &quot;/&quot;,\n                        Domain:  &quot;&quot;,\n                        Expires: time.Now().Add(time.Hour),\n                }\n\n                time.AfterFunc(time.Hour, func() {\n                        _ = os.RemoveAll(f)\n                })\n\n                c.SetCookie(&amp;cookie)\n                return c.Redirect(302, &quot;/&quot;)\n        })\n\n        _, err := os.Stat(sessionDir)\n        if err != nil {\n                if err := os.MkdirAll(sessionDir, os.ModePerm); err != nil {\n                        e.Logger.Fatal(err)\n                }\n        }\n\n        e.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 15
  },
  {
    "id": "93e97994-7e5f-4139-8e30-81531f25af2f",
    "name": "物是人非",
    "description": "### 题目背景\n\n魔改了 base64 。\n\n### 源码\n\n```\npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar notBase64Std = \"/+9876543210zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA\"\nvar notStdEncoding = ⬛⬛⬛⬛马赛克⬛⬛⬛⬛\n\nfunc main() {\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tflag := os.Getenv(\"flag\")\n\t\tencoded := notStdEncoding.EncodeToString([]byte(flag))\n\t\treturn c.String(http.StatusOK, encoded)\n\t})\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "4f72ef81-ee8b-4f82-90b6-d5f5915fdec1",
    "exposed": "80",
    "duration": 15,
    "created_at": 1698218902581,
    "updated_at": 1756867288780,
    "html": "<h3>题目背景</h3>\n<p>魔改了 base64 。</p>\n<h3>源码</h3>\n<pre><code>package main\n\nimport (\n\t&quot;encoding/base64&quot;\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\nvar notBase64Std = &quot;/+9876543210zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA&quot;\nvar notStdEncoding = ⬛⬛⬛⬛马赛克⬛⬛⬛⬛\n\nfunc main() {\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\tflag := os.Getenv(&quot;flag&quot;)\n\t\tencoded := notStdEncoding.EncodeToString([]byte(flag))\n\t\treturn c.String(http.StatusOK, encoded)\n\t})\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 11
  },
  {
    "id": "684cbde8-a519-4603-bea8-35d23b62193f",
    "name": "记忆游戏",
    "description": "# this is a game\n\nhttps://en.wikipedia.org/wiki/Concentration_(card_game)\n\nhttps://github.com/google/google-ctf/tree/7dc15ebb26df0c83a3eafd7ebd24410d85edca68/2019/quals/misc-doomed",
    "category": "audit",
    "difficulty": "hard",
    "points": 3,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "87a82172-b925-49c8-8a89-84ba37c7d015",
    "exposed": "80",
    "duration": 60,
    "created_at": 1701417502099,
    "updated_at": 1756870653799,
    "html": "<h1>this is a game</h1>\n<p><a href=\"https://en.wikipedia.org/wiki/Concentration_(card_game)\">https://en.wikipedia.org/wiki/Concentration_(card_game)</a></p>\n<p><a href=\"https://github.com/google/google-ctf/tree/7dc15ebb26df0c83a3eafd7ebd24410d85edca68/2019/quals/misc-doomed\">https://github.com/google/google-ctf/tree/7dc15ebb26df0c83a3eafd7ebd24410d85edca68/2019/quals/misc-doomed</a></p>\n",
    "sort": 4
  },
  {
    "id": "e2c372c5-88b5-11ed-b0c9-525400a7f0d4",
    "name": "偷\uD83D\uDC14摸\uD83D\uDC36",
    "description": "### 题目背景\n\n你是一名网络安全专家，最近收到了一份来自某政府机构的委托，窃取位于 /cyberpoc/flag 的重要文件。\n\n### 源码\n\n``` go\npackage main\n\nimport (\n\t_ \"embed\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\n\tconst uploadDir = \"files\"\n\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.GET(\"/download\", func(c echo.Context) error {\n\t\tfilename := c.QueryParam(\"filename\")\n\t\treturn c.File(path.Join(uploadDir, filename))\n\t})\n\n\te.POST(\"/upload\", func(c echo.Context) error {\n\t\tfile, err := c.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer src.Close()\n\n\t\tfullName := path.Join(uploadDir, file.Filename)\n\t\t// Destination\n\t\tdst, err := os.Create(fullName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer dst.Close()\n\n\t\t// Copy\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn c.JSON(200, map[string]string{\n\t\t\t\"filename\": file.Filename,\n\t\t})\n\t})\n\n\t_, err := os.Stat(uploadDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\t_ = os.Remove(\"flag\")\n\tflag := os.Getenv(\"flag\")\n\tif err := os.WriteFile(\"flag\", []byte(flag), os.ModeType); err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "07849d9a-c7f9-11ed-8d7d-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1672455029327,
    "updated_at": 1756831621443,
    "html": "<h3>题目背景</h3>\n<p>你是一名网络安全专家，最近收到了一份来自某政府机构的委托，窃取位于 /cyberpoc/flag 的重要文件。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t_ &quot;embed&quot;\n\t&quot;io&quot;\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\t&quot;path&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\n\tconst uploadDir = &quot;files&quot;\n\n\te := echo.New()\n\te.Debug = true\n\te.Use(middleware.Gzip())\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.GET(&quot;/download&quot;, func(c echo.Context) error {\n\t\tfilename := c.QueryParam(&quot;filename&quot;)\n\t\treturn c.File(path.Join(uploadDir, filename))\n\t})\n\n\te.POST(&quot;/upload&quot;, func(c echo.Context) error {\n\t\tfile, err := c.FormFile(&quot;file&quot;)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsrc, err := file.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer src.Close()\n\n\t\tfullName := path.Join(uploadDir, file.Filename)\n\t\t// Destination\n\t\tdst, err := os.Create(fullName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer dst.Close()\n\n\t\t// Copy\n\t\tif _, err = io.Copy(dst, src); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn c.JSON(200, map[string]string{\n\t\t\t&quot;filename&quot;: file.Filename,\n\t\t})\n\t})\n\n\t_, err := os.Stat(uploadDir)\n\tif err != nil {\n\t\tif err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {\n\t\t\te.Logger.Fatal(err)\n\t\t}\n\t}\n\n\t_ = os.Remove(&quot;flag&quot;)\n\tflag := os.Getenv(&quot;flag&quot;)\n\tif err := os.WriteFile(&quot;flag&quot;, []byte(flag), os.ModeType); err != nil {\n\t\te.Logger.Fatal(err)\n\t}\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 14
  },
  {
    "id": "60309d34-85ba-11ed-866e-525400a7f0d4",
    "name": "丢三落四",
    "description": "### 题目背景\n\n你是一名脚本小子，最近朋友发给你一个网站，希望你能帮他找到他丢失在这里的敏感信息。\n\n### 源码\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\tflag := os.Getenv(\"flag\")\n\n\t\tcookie := new(http.Cookie)\n\t\tcookie.Name = \"flag\"\n\t\tcookie.Value = flag\n\t\tcookie.Expires = time.Now().Add(24 * time.Hour)\n\t\tc.SetCookie(cookie)\n\n\t\treturn c.HTML(http.StatusOK, `Hello World!`)\n\t})\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n```",
    "category": "audit",
    "difficulty": "easy",
    "points": 1,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "1ae7e148-c7f9-11ed-8d7d-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1672127104256,
    "updated_at": 1756830315755,
    "html": "<h3>题目背景</h3>\n<p>你是一名脚本小子，最近朋友发给你一个网站，希望你能帮他找到他丢失在这里的敏感信息。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\t&quot;time&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n)\n\nfunc main() {\n\te := echo.New()\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\tflag := os.Getenv(&quot;flag&quot;)\n\n\t\tcookie := new(http.Cookie)\n\t\tcookie.Name = &quot;flag&quot;\n\t\tcookie.Value = flag\n\t\tcookie.Expires = time.Now().Add(24 * time.Hour)\n\t\tc.SetCookie(cookie)\n\n\t\treturn c.HTML(http.StatusOK, `Hello World!`)\n\t})\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 20
  },
  {
    "id": "a6c9c2ab-d86a-11ed-b188-525400a7f0d4",
    "name": "鹊巢鸠占",
    "description": "### 题目背景\n\n由于之前的版本存在命令注入的漏洞，开发对其进行了修复，他认为没有什么问题了。\n\n### 源码\n\n``` go\npackage main\n\nimport (\n\t_ \"embed\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os/exec\"\n\t\"strings\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype CyberWriter struct {\n\tresp *echo.Response\n}\n\nfunc (r CyberWriter) Write(p []byte) (n int, err error) {\n\tn, err = r.resp.Write(p)\n\tr.resp.Flush()\n\treturn\n}\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\n\te := echo.New()\n\te.Use(middleware.Gzip())\n\te.Use(middleware.CORS())\n\te.Debug = true\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.GET(\"/ping\", func(c echo.Context) error {\n\t\tip := c.QueryParam(\"ip\")\n\t\tif ip == \"\" {\n\t\t\treturn c.String(400, \"ip is required\")\n\t\t}\n\t\t// 过滤变量ip中的|&;`'等字符\n\t\tip = strings.ReplaceAll(ip, \"|\", \"\")\n\t\tip = strings.ReplaceAll(ip, \"&\", \"\")\n\t\tip = strings.ReplaceAll(ip, \";\", \"\")\n\t\tip = strings.ReplaceAll(ip, \"`\", \"\")\n\t\tip = strings.ReplaceAll(ip, \"'\", \"\")\n\t\tip = strings.ReplaceAll(ip, \"$\", \"\")\n\t\tcommand := fmt.Sprintf(`ping %s -c 4`, ip)\n\t\tcmd := exec.Command(\"sh\", \"-c\", command)\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, `text/event-stream`)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\n\t\twriter := CyberWriter{\n\t\t\tresp: c.Response(),\n\t\t}\n\t\tcmd.Stdout = writer\n\t\tcmd.Stderr = writer\n\t\terr := cmd.Run()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "b29e9cca-db4d-11ed-8a98-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1681536409977,
    "updated_at": 1756831658000,
    "html": "<h3>题目背景</h3>\n<p>由于之前的版本存在命令注入的漏洞，开发对其进行了修复，他认为没有什么问题了。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t_ &quot;embed&quot;\n\t&quot;fmt&quot;\n\t&quot;net/http&quot;\n\t&quot;os/exec&quot;\n\t&quot;strings&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\ntype CyberWriter struct {\n\tresp *echo.Response\n}\n\nfunc (r CyberWriter) Write(p []byte) (n int, err error) {\n\tn, err = r.resp.Write(p)\n\tr.resp.Flush()\n\treturn\n}\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\n\te := echo.New()\n\te.Use(middleware.Gzip())\n\te.Use(middleware.CORS())\n\te.Debug = true\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.GET(&quot;/ping&quot;, func(c echo.Context) error {\n\t\tip := c.QueryParam(&quot;ip&quot;)\n\t\tif ip == &quot;&quot; {\n\t\t\treturn c.String(400, &quot;ip is required&quot;)\n\t\t}\n\t\t// 过滤变量ip中的|&amp;;`&#39;等字符\n\t\tip = strings.ReplaceAll(ip, &quot;|&quot;, &quot;&quot;)\n\t\tip = strings.ReplaceAll(ip, &quot;&amp;&quot;, &quot;&quot;)\n\t\tip = strings.ReplaceAll(ip, &quot;;&quot;, &quot;&quot;)\n\t\tip = strings.ReplaceAll(ip, &quot;`&quot;, &quot;&quot;)\n\t\tip = strings.ReplaceAll(ip, &quot;&#39;&quot;, &quot;&quot;)\n\t\tip = strings.ReplaceAll(ip, &quot;$&quot;, &quot;&quot;)\n\t\tcommand := fmt.Sprintf(`ping %s -c 4`, ip)\n\t\tcmd := exec.Command(&quot;sh&quot;, &quot;-c&quot;, command)\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, `text/event-stream`)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\n\t\twriter := CyberWriter{\n\t\t\tresp: c.Response(),\n\t\t}\n\t\tcmd.Stdout = writer\n\t\tcmd.Stderr = writer\n\t\terr := cmd.Run()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 12
  },
  {
    "id": "9156e4f9-dac8-11ed-8a98-525400a7f0d4",
    "name": "反客为主",
    "description": "### 题目背景\n\n开发大意了。\n\n### 源码\n``` go\npackage main\n\nimport (\n\t_ \"embed\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os/exec\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\ntype CyberWriter struct {\n\tresp *echo.Response\n}\n\nfunc (r CyberWriter) Write(p []byte) (n int, err error) {\n\tn, err = r.resp.Write(p)\n\tr.resp.Flush()\n\treturn\n}\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\n\te := echo.New()\n\te.Use(middleware.Gzip())\n\te.Use(middleware.CORS())\n\te.Debug = true\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.GET(\"/ping\", func(c echo.Context) error {\n\t\tip := c.QueryParam(\"ip\")\n\t\tif ip == \"\" {\n\t\t\treturn c.String(400, \"ip is required\")\n\t\t}\n\n\t\tcommand := fmt.Sprintf(`ping %s -c 4`, ip)\n\t\tcmd := exec.Command(\"sh\", \"-c\", command)\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, `text/event-stream`)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\n\t\twriter := CyberWriter{\n\t\t\tresp: c.Response(),\n\t\t}\n\t\tcmd.Stdout = writer\n\t\tcmd.Stderr = writer\n\t\terr := cmd.Run()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "d07e3ddb-dac7-11ed-8a98-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1681479048505,
    "updated_at": 1756831751709,
    "html": "<h3>题目背景</h3>\n<p>开发大意了。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t_ &quot;embed&quot;\n\t&quot;fmt&quot;\n\t&quot;net/http&quot;\n\t&quot;os/exec&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\ntype CyberWriter struct {\n\tresp *echo.Response\n}\n\nfunc (r CyberWriter) Write(p []byte) (n int, err error) {\n\tn, err = r.resp.Write(p)\n\tr.resp.Flush()\n\treturn\n}\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\n\te := echo.New()\n\te.Use(middleware.Gzip())\n\te.Use(middleware.CORS())\n\te.Debug = true\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.GET(&quot;/ping&quot;, func(c echo.Context) error {\n\t\tip := c.QueryParam(&quot;ip&quot;)\n\t\tif ip == &quot;&quot; {\n\t\t\treturn c.String(400, &quot;ip is required&quot;)\n\t\t}\n\n\t\tcommand := fmt.Sprintf(`ping %s -c 4`, ip)\n\t\tcmd := exec.Command(&quot;sh&quot;, &quot;-c&quot;, command)\n\n\t\tc.Response().Header().Set(echo.HeaderContentType, `text/event-stream`)\n\t\tc.Response().WriteHeader(http.StatusOK)\n\n\t\twriter := CyberWriter{\n\t\t\tresp: c.Response(),\n\t\t}\n\t\tcmd.Stdout = writer\n\t\tcmd.Stderr = writer\n\t\terr := cmd.Run()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 13
  },
  {
    "id": "bdf0efe7-d0c3-4f71-b3f4-5e12f0663fd6",
    "name": "翻山越岭",
    "description": "### 题目背景\n\n谁能想到，一个简单的 zip 解压，竟然有这么多的坑。。。\n\n### 源码\n\n```go\n\thttp.HandleFunc(\"/unzip\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != http.MethodPost {\n\t\t\tw.WriteHeader(http.StatusMethodNotAllowed)\n\t\t\t_, _ = w.Write([]byte(\"Method Not Allowed\"))\n\t\t\treturn\n\t\t}\n\t\tif err := r.ParseMultipartForm(32 << 20); err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\t_, _ = w.Write([]byte(\"bad form\"))\n\t\t\treturn\n\t\t}\n\t\tfile, _, err := r.FormFile(\"file\")\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\t_, _ = w.Write([]byte(\"missing file\"))\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\n\t\tvar buf bytes.Buffer\n\t\tif _, err := io.Copy(&buf, file); err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t_, _ = w.Write([]byte(\"read error\"))\n\t\t\treturn\n\t\t}\n\n\t\tif err := unzipUnsafe(extractDir, buf.Bytes()); err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t_, _ = fmt.Fprintf(w, \"unzip error: %v\", err)\n\t\t\treturn\n\t\t}\n\n\t\tcmd := exec.Command(\"sh\", \"extracted.sh\")\n\t\tvar out bytes.Buffer\n\t\tvar stderr bytes.Buffer\n\t\tcmd.Stdout = &out\n\t\tcmd.Stderr = &stderr\n\t\tif err := cmd.Run(); err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t_, _ = fmt.Fprintf(w, \"post script err: %s, stderr: %s\", err.Error(), stderr.String())\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(\"Content-Type\", \"text/html; charset=utf-8\")\n\t\t_, _ = fmt.Fprintf(w, `<h2>Unzipped!</h2><br/>\n<pre>%s</pre>\n<a href='/' >Home</a>\n`, out.String())\n\t})\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "448554d0-a55b-4adb-bd9f-937a79f504e5",
    "exposed": "80",
    "duration": 15,
    "created_at": 1756975398916,
    "updated_at": 1756975398916,
    "html": "<h3>题目背景</h3>\n<p>谁能想到，一个简单的 zip 解压，竟然有这么多的坑。。。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">\thttp.HandleFunc(&quot;/unzip&quot;, func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != http.MethodPost {\n\t\t\tw.WriteHeader(http.StatusMethodNotAllowed)\n\t\t\t_, _ = w.Write([]byte(&quot;Method Not Allowed&quot;))\n\t\t\treturn\n\t\t}\n\t\tif err := r.ParseMultipartForm(32 &lt;&lt; 20); err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\t_, _ = w.Write([]byte(&quot;bad form&quot;))\n\t\t\treturn\n\t\t}\n\t\tfile, _, err := r.FormFile(&quot;file&quot;)\n\t\tif err != nil {\n\t\t\tw.WriteHeader(http.StatusBadRequest)\n\t\t\t_, _ = w.Write([]byte(&quot;missing file&quot;))\n\t\t\treturn\n\t\t}\n\t\tdefer file.Close()\n\n\t\tvar buf bytes.Buffer\n\t\tif _, err := io.Copy(&amp;buf, file); err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t_, _ = w.Write([]byte(&quot;read error&quot;))\n\t\t\treturn\n\t\t}\n\n\t\tif err := unzipUnsafe(extractDir, buf.Bytes()); err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t_, _ = fmt.Fprintf(w, &quot;unzip error: %v&quot;, err)\n\t\t\treturn\n\t\t}\n\n\t\tcmd := exec.Command(&quot;sh&quot;, &quot;extracted.sh&quot;)\n\t\tvar out bytes.Buffer\n\t\tvar stderr bytes.Buffer\n\t\tcmd.Stdout = &amp;out\n\t\tcmd.Stderr = &amp;stderr\n\t\tif err := cmd.Run(); err != nil {\n\t\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\t\t_, _ = fmt.Fprintf(w, &quot;post script err: %s, stderr: %s&quot;, err.Error(), stderr.String())\n\t\t\treturn\n\t\t}\n\n\t\tw.Header().Set(&quot;Content-Type&quot;, &quot;text/html; charset=utf-8&quot;)\n\t\t_, _ = fmt.Fprintf(w, `&lt;h2&gt;Unzipped!&lt;/h2&gt;&lt;br/&gt;\n&lt;pre&gt;%s&lt;/pre&gt;\n&lt;a href=&#39;/&#39; &gt;Home&lt;/a&gt;\n`, out.String())\n\t})\n</code></pre>\n",
    "sort": 21
  },
  {
    "id": "7399d634-1fd5-11ee-9382-525400a7f0d4",
    "name": "乾坤坎离",
    "description": "### 题目背景\n\n“有天地，然后万物生焉。盈天地之间者，唯万物，故受之以屯；屯者盈也，屯者物之始生也。”\n\n**大道五十 天衍四九 人遁其一**\n\n### 源码\n\n```go\ne.GET(\"/choose/:choose/:price\", func(c echo.Context) error {\n\tchoose, _ := strconv.ParseInt(c.Param(\"choose\"), 10, 64)\n\tprice, _ := strconv.ParseInt(c.Param(\"price\"), 10, 64)\n\n\tif atomic.LoadInt64(&hp) == 0 {\n\t\treturn c.String(200, `你已经被美貌女鬼吸干了阳气，请重新开始。`)\n\t}\n\t// 扣除血量\n\tatomic.AddInt64(&hp, price*-1)\n\n\tif atomic.LoadInt64(&option) == choose {\n\t\tflag := os.Getenv(\"flag\")\n\t\treturn c.String(200, flag)\n\t}\n\n\treturn c.String(200, \"你选错了，代价是【被美貌女鬼吸干阳气】。\")\n})\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "5ad2adff-1fd5-11ee-9382-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1689071212302,
    "updated_at": 1756831483943,
    "html": "<h3>题目背景</h3>\n<p>“有天地，然后万物生焉。盈天地之间者，唯万物，故受之以屯；屯者盈也，屯者物之始生也。”</p>\n<p><strong>大道五十 天衍四九 人遁其一</strong></p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">e.GET(&quot;/choose/:choose/:price&quot;, func(c echo.Context) error {\n\tchoose, _ := strconv.ParseInt(c.Param(&quot;choose&quot;), 10, 64)\n\tprice, _ := strconv.ParseInt(c.Param(&quot;price&quot;), 10, 64)\n\n\tif atomic.LoadInt64(&amp;hp) == 0 {\n\t\treturn c.String(200, `你已经被美貌女鬼吸干了阳气，请重新开始。`)\n\t}\n\t// 扣除血量\n\tatomic.AddInt64(&amp;hp, price*-1)\n\n\tif atomic.LoadInt64(&amp;option) == choose {\n\t\tflag := os.Getenv(&quot;flag&quot;)\n\t\treturn c.String(200, flag)\n\t}\n\n\treturn c.String(200, &quot;你选错了，代价是【被美貌女鬼吸干阳气】。&quot;)\n})\n</code></pre>\n",
    "sort": 17
  },
  {
    "id": "f9e00ef5-8599-11ed-9edf-525400a7f0d4",
    "name": "暗渡陈仓",
    "description": "### 题目背景\n\n你是一名网络安全专家，最近收到了一份来自某政府机构的委托，窃取位于内网 http://127.0.0.1:8000/flag 的重要文件，但该文件有非常严格的防护手段，仅允许最高指挥官访问，你需要伪装自己以达到目的。\n\n### 源码\n\n``` go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/labstack/echo/v4\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc cyberpocSSRF(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\ttarget := c.QueryParam(\"target\")\n\t\t_url, err := url.Parse(strings.TrimSpace(target))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tips, err := net.LookupIP(_url.Hostname())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfor _, ip := range ips {\n\t\t\tipAddr := ip.String()\n\t\t\tif ipAddr == \"82.157.160.150\" {\n\t\t\t\treturn next(c)\n\t\t\t}\n\t\t}\n\t\treturn c.String(http.StatusBadRequest, \"Not allowed!\")\n\t}\n}\n\nconst indexHtml = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>SSRF | CyberPoC</title>\n</head>\n<body>\n<H1>CyberPoC SSRF</H1>\n\n<form action=\"/get-file\" method=\"get\">\n    <input type=\"text\" name=\"target\" value=\"https://f.typesafe.cn/cyberpoc/hi.txt\">\n    <button type=\"submit\">Get</button>\n</form>\n</body>\n</html>`\n\nfunc main() {\n\n\tgo func() {\n\t\tdebug := echo.New()\n\t\tdebug.GET(\"/flag\", func(c echo.Context) error {\n\t\t\thtml := fmt.Sprintf(`FLAG: %s`, os.Getenv(\"flag\"))\n\t\t\treturn c.HTML(http.StatusOK, html)\n\t\t})\n\t\tdebug.Logger.Fatal(debug.Start(\"127.0.0.1:8000\"))\n\t}()\n\n\te := echo.New()\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\te.GET(\"/get-file\", func(c echo.Context) error {\n\t\t// optimize when you pay\n\t\ttime.Sleep(time.Second * 3)\n\t\t// get file\n\t\ttarget := c.QueryParam(\"target\")\n\t\tresp, err := http.Get(strings.TrimSpace(target))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tbytes, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = c.Response().Write(bytes)\n\t\treturn err\n\t}, cyberpocSSRF)\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n\n```",
    "category": "audit",
    "difficulty": "hard",
    "points": 3,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "f78fd287-c7f8-11ed-8d7d-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1672113188705,
    "updated_at": 1756867564125,
    "html": "<h3>题目背景</h3>\n<p>你是一名网络安全专家，最近收到了一份来自某政府机构的委托，窃取位于内网 <a href=\"http://127.0.0.1:8000/flag\">http://127.0.0.1:8000/flag</a> 的重要文件，但该文件有非常严格的防护手段，仅允许最高指挥官访问，你需要伪装自己以达到目的。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;io&quot;\n\t&quot;net&quot;\n\t&quot;net/http&quot;\n\t&quot;net/url&quot;\n\t&quot;os&quot;\n\t&quot;strings&quot;\n\t&quot;time&quot;\n)\n\nfunc cyberpocSSRF(next echo.HandlerFunc) echo.HandlerFunc {\n\treturn func(c echo.Context) error {\n\t\ttarget := c.QueryParam(&quot;target&quot;)\n\t\t_url, err := url.Parse(strings.TrimSpace(target))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tips, err := net.LookupIP(_url.Hostname())\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfor _, ip := range ips {\n\t\t\tipAddr := ip.String()\n\t\t\tif ipAddr == &quot;82.157.160.150&quot; {\n\t\t\t\treturn next(c)\n\t\t\t}\n\t\t}\n\t\treturn c.String(http.StatusBadRequest, &quot;Not allowed!&quot;)\n\t}\n}\n\nconst indexHtml = `&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;SSRF | CyberPoC&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;H1&gt;CyberPoC SSRF&lt;/H1&gt;\n\n&lt;form action=&quot;/get-file&quot; method=&quot;get&quot;&gt;\n    &lt;input type=&quot;text&quot; name=&quot;target&quot; value=&quot;https://f.typesafe.cn/cyberpoc/hi.txt&quot;&gt;\n    &lt;button type=&quot;submit&quot;&gt;Get&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;`\n\nfunc main() {\n\n\tgo func() {\n\t\tdebug := echo.New()\n\t\tdebug.GET(&quot;/flag&quot;, func(c echo.Context) error {\n\t\t\thtml := fmt.Sprintf(`FLAG: %s`, os.Getenv(&quot;flag&quot;))\n\t\t\treturn c.HTML(http.StatusOK, html)\n\t\t})\n\t\tdebug.Logger.Fatal(debug.Start(&quot;127.0.0.1:8000&quot;))\n\t}()\n\n\te := echo.New()\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\te.GET(&quot;/get-file&quot;, func(c echo.Context) error {\n\t\t// optimize when you pay\n\t\ttime.Sleep(time.Second * 3)\n\t\t// get file\n\t\ttarget := c.QueryParam(&quot;target&quot;)\n\t\tresp, err := http.Get(strings.TrimSpace(target))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\tbytes, err := io.ReadAll(resp.Body)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = c.Response().Write(bytes)\n\t\treturn err\n\t}, cyberpocSSRF)\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 2
  },
  {
    "id": "fb6dd41c-de64-11ed-8361-525400a7f0d4",
    "name": "指鹿为马",
    "description": "### 题目背景\n\n程序员小D在在开发TOTP算法时不会写，问了ChatGPT才搞定，但这个算法好像和 TOTP 好像有点出入，由于小D的领导也没看出来问题，就这样上线了。\n\n### 源码\n\n``` go\npackage main\n\nimport (\n\t// 省略\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/labstack/echo/v4/middleware\"\n)\n\nvar (\n\tsecret   = \"*****\" // 隐藏密钥\n\ttimeStep = 30      // 时间步长，单位为秒\n\tdigits   = 6       // totp长度\n)\n\nfunc generateTOTP(secret string, t time.Time) string {\n\t// 解码密钥\n\tkey, _ := base32.StdEncoding.DecodeString(strings.ToUpper(secret))\n\t// 每30秒生成一个新的TOTP码\n\tn := t.Unix() / int64(timeStep)\n\t// 将时间戳转换为8个字节的大端字节序\n\tmsg := make([]byte, 8)\n\tbinary.BigEndian.PutUint64(msg, uint64(n))\n\n\t// 计算HMAC\n\th := hmac.New(sha1.New, key)\n\th.Write(msg)\n\thmacHash := h.Sum(nil)\n\n\t// 计算TOTP令牌\n\toffset := hmacHash[len(hmacHash)-1] & 0x0f\n\ttruncatedHash := binary.BigEndian.Uint32(hmacHash[offset:offset+4]) & 0x7fffffff\n\ttotpCode := fmt.Sprintf(\"%0*d\", digits, truncatedHash%uint32(10^digits))\n\t// 将结果转换为6位的字符串\n\treturn totpCode\n}\n\nfunc validateTOTP(secret, passcode string, t time.Time) bool {\n\texpectedCode := generateTOTP(secret, t)\n\t// 验证提供的TOTP码和预期的TOTP码是否匹配\n\treturn passcode == expectedCode\n}\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Gzip())\n\te.Use(middleware.CORS())\n\te.Debug = true\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.POST(\"/flag\", func(c echo.Context) error {\n\t\tpasscode := c.FormValue(\"passcode\")\n\t\tif !validateTOTP(secret, passcode, time.Now()) {\n\t\t\treturn c.String(400, `您输入的密码不正确`)\n\t\t}\n\t\treturn c.String(200, os.Getenv(\"flag\"))\n\t})\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "233d5681-de64-11ed-8361-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1681876081472,
    "updated_at": 1756867366861,
    "html": "<h3>题目背景</h3>\n<p>程序员小D在在开发TOTP算法时不会写，问了ChatGPT才搞定，但这个算法好像和 TOTP 好像有点出入，由于小D的领导也没看出来问题，就这样上线了。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t// 省略\n\t&quot;github.com/labstack/echo/v4&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\nvar (\n\tsecret   = &quot;*****&quot; // 隐藏密钥\n\ttimeStep = 30      // 时间步长，单位为秒\n\tdigits   = 6       // totp长度\n)\n\nfunc generateTOTP(secret string, t time.Time) string {\n\t// 解码密钥\n\tkey, _ := base32.StdEncoding.DecodeString(strings.ToUpper(secret))\n\t// 每30秒生成一个新的TOTP码\n\tn := t.Unix() / int64(timeStep)\n\t// 将时间戳转换为8个字节的大端字节序\n\tmsg := make([]byte, 8)\n\tbinary.BigEndian.PutUint64(msg, uint64(n))\n\n\t// 计算HMAC\n\th := hmac.New(sha1.New, key)\n\th.Write(msg)\n\thmacHash := h.Sum(nil)\n\n\t// 计算TOTP令牌\n\toffset := hmacHash[len(hmacHash)-1] &amp; 0x0f\n\ttruncatedHash := binary.BigEndian.Uint32(hmacHash[offset:offset+4]) &amp; 0x7fffffff\n\ttotpCode := fmt.Sprintf(&quot;%0*d&quot;, digits, truncatedHash%uint32(10^digits))\n\t// 将结果转换为6位的字符串\n\treturn totpCode\n}\n\nfunc validateTOTP(secret, passcode string, t time.Time) bool {\n\texpectedCode := generateTOTP(secret, t)\n\t// 验证提供的TOTP码和预期的TOTP码是否匹配\n\treturn passcode == expectedCode\n}\n\n//go:embed index.html\nvar indexHtml string\n\nfunc main() {\n\te := echo.New()\n\te.Use(middleware.Gzip())\n\te.Use(middleware.CORS())\n\te.Debug = true\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, indexHtml)\n\t})\n\n\te.POST(&quot;/flag&quot;, func(c echo.Context) error {\n\t\tpasscode := c.FormValue(&quot;passcode&quot;)\n\t\tif !validateTOTP(secret, passcode, time.Now()) {\n\t\t\treturn c.String(400, `您输入的密码不正确`)\n\t\t}\n\t\treturn c.String(200, os.Getenv(&quot;flag&quot;))\n\t})\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 8
  },
  {
    "id": "288e3926-d7b1-11ed-b188-525400a7f0d4",
    "name": "瞒天过海",
    "description": "### 题目背景\n\n编不下去了。\n\n### 源码\n\n``` go\npackage main\n\nimport (\n        \"fmt\"\n        \"os\"\n        \"os/exec\"\n        \"path\"\n        \"strconv\"\n        \"strings\"\n\n        \"github.com/labstack/echo/v4\"\n        \"github.com/labstack/echo/v4/middleware\"\n)\n\nconst indexHtml = `...`\n\nfunc writeFile(filename string, content []byte) error {\n        // ...\n}\n\nfunc main() {\n        e := echo.New()\n        e.Debug = true\n        e.Use(middleware.Gzip())\n\n        e.GET(\"/\", func(c echo.Context) error {\n                return c.HTML(200, indexHtml)\n        })\n\n        e.POST(\"/picture\", func(c echo.Context) error {\n                url := c.FormValue(\"url\")\n                if url == \"\" {\n                        url = \"http://localhost\"\n                }\n                img := c.FormValue(\"img\")\n                if img == \"\" {\n                        img = \"profile.jpg\"\n                }\n                if !strings.Contains(url, \"http://localhost\") {\n                        return c.String(403, `Forbidden 1`)\n                }\n                ext := path.Ext(img)\n                if ext != \".jpg\" && ext != \".png\" {\n                        return c.String(403, `Forbidden 2`)\n                }\n\n                var args = []string{\n                        \"curl\", \"--proto\", \"-file\", strconv.Quote(url), \"-X\",\n                        \"GET\", \"-F\", strconv.Quote(fmt.Sprintf(`image=%s`, img)), \">\",\n                        \"backup_profile.jpg\",\n                }\n\n                cmd := exec.Command(\"sh\", \"-c\", strings.Join(args, \" \"))\n\n                if err := cmd.Run(); err != nil {\n                        return c.String(500, `Internal Server Error: `+err.Error())\n                }\n\n                return c.String(200, \"thanks for testing our image backup service!\")\n        })\n\n        flag := os.Getenv(\"flag\")\n        if err := writeFile(\"flag\", []byte(flag)); err != nil {\n                e.Logger.Fatal(err)\n        }\n\n        e.Logger.Fatal(e.Start(\":80\"))\n}\n\n```",
    "category": "audit",
    "difficulty": "hard",
    "points": 3,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "ec656155-d7b0-11ed-b188-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1681139140794,
    "updated_at": 1756867512490,
    "html": "<h3>题目背景</h3>\n<p>编不下去了。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n        &quot;fmt&quot;\n        &quot;os&quot;\n        &quot;os/exec&quot;\n        &quot;path&quot;\n        &quot;strconv&quot;\n        &quot;strings&quot;\n\n        &quot;github.com/labstack/echo/v4&quot;\n        &quot;github.com/labstack/echo/v4/middleware&quot;\n)\n\nconst indexHtml = `...`\n\nfunc writeFile(filename string, content []byte) error {\n        // ...\n}\n\nfunc main() {\n        e := echo.New()\n        e.Debug = true\n        e.Use(middleware.Gzip())\n\n        e.GET(&quot;/&quot;, func(c echo.Context) error {\n                return c.HTML(200, indexHtml)\n        })\n\n        e.POST(&quot;/picture&quot;, func(c echo.Context) error {\n                url := c.FormValue(&quot;url&quot;)\n                if url == &quot;&quot; {\n                        url = &quot;http://localhost&quot;\n                }\n                img := c.FormValue(&quot;img&quot;)\n                if img == &quot;&quot; {\n                        img = &quot;profile.jpg&quot;\n                }\n                if !strings.Contains(url, &quot;http://localhost&quot;) {\n                        return c.String(403, `Forbidden 1`)\n                }\n                ext := path.Ext(img)\n                if ext != &quot;.jpg&quot; &amp;&amp; ext != &quot;.png&quot; {\n                        return c.String(403, `Forbidden 2`)\n                }\n\n                var args = []string{\n                        &quot;curl&quot;, &quot;--proto&quot;, &quot;-file&quot;, strconv.Quote(url), &quot;-X&quot;,\n                        &quot;GET&quot;, &quot;-F&quot;, strconv.Quote(fmt.Sprintf(`image=%s`, img)), &quot;&gt;&quot;,\n                        &quot;backup_profile.jpg&quot;,\n                }\n\n                cmd := exec.Command(&quot;sh&quot;, &quot;-c&quot;, strings.Join(args, &quot; &quot;))\n\n                if err := cmd.Run(); err != nil {\n                        return c.String(500, `Internal Server Error: `+err.Error())\n                }\n\n                return c.String(200, &quot;thanks for testing our image backup service!&quot;)\n        })\n\n        flag := os.Getenv(&quot;flag&quot;)\n        if err := writeFile(&quot;flag&quot;, []byte(flag)); err != nil {\n                e.Logger.Fatal(err)\n        }\n\n        e.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 3
  },
  {
    "id": "99b2a3e1-2590-4efd-af1c-4fe186a15ad3",
    "name": "狐假虎威",
    "description": "### 题目背景\n\n你是一名卷王的同学， 最近考试得了99分，十分开心，向你的卷王朋友说了这件事情，他却不屑一顾。你有点难受，想看看卷王的分数，但只要管理员才能看到，你需要假装自己是管理员去查看。\n\n### 源码\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/labstack/echo/v4/middleware\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\te := echo.New()\n\te.Debug = true\n\te.IPExtractor = echo.ExtractIPFromRealIPHeader()\n\te.Use(middleware.Gzip())\n\n\te.GET(\"/\", func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `<H1>CyberPoC SSRF</H1><br/>\n<a href='/admin'>Admin Dashboard</a>`)\n\t})\n\n\te.GET(\"/admin\", func(c echo.Context) error {\n\t\t_, _ = fmt.Fprintln(c.Response(), `<p>Verify that your an administrator, wait...</p>`)\n\n\t\tclientIp := c.RealIP()\n\t\tcookie, _ := c.Request().Cookie(\"role\")\n\t\tif cookie == nil {\n\t\t\treturn c.HTML(http.StatusForbidden, `<p>You are not administrator</p>`)\n\t\t}\n\t\trole := cookie.Value\n\n\t\tvar passed = false\n\t\tif strings.EqualFold(role, \"admin\") {\n\t\t\tfor _, ip := range []string{\"127.0.0.1\", \"localhost\"} {\n\t\t\t\tif ip == clientIp {\n\t\t\t\t\tpassed = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlog.Printf(\"clientIp: %s, role: %s, passed: %v\\n\", clientIp, role, passed)\n\n\t\tif passed {\n\t\t\thtml := fmt.Sprintf(`FLAG: %s`, os.Getenv(\"flag\"))\n\t\t\t_, _ = fmt.Fprintln(c.Response(), html)\n\t\t\treturn nil\n\t\t} else {\n\t\t\t_, _ = fmt.Fprintln(c.Response(), `<p>You are not administrator.</p>`)\n\t\t\treturn nil\n\t\t}\n\t})\n\n\te.Logger.Fatal(e.Start(\":80\"))\n}\n```",
    "category": "audit",
    "difficulty": "medium",
    "points": 2,
    "flag": "",
    "dynamic_flag": true,
    "enabled": true,
    "image_id": "feea2ebc-c7f8-11ed-8d7d-525400a7f0d4",
    "exposed": "80",
    "duration": 15,
    "created_at": 1671619823000,
    "updated_at": 1756831448964,
    "html": "<h3>题目背景</h3>\n<p>你是一名卷王的同学， 最近考试得了99分，十分开心，向你的卷王朋友说了这件事情，他却不屑一顾。你有点难受，想看看卷王的分数，但只要管理员才能看到，你需要假装自己是管理员去查看。</p>\n<h3>源码</h3>\n<pre><code class=\"language-go\">package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;github.com/labstack/echo/v4/middleware&quot;\n\t&quot;log&quot;\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\t&quot;strings&quot;\n\n\t&quot;github.com/labstack/echo/v4&quot;\n)\n\nfunc main() {\n\te := echo.New()\n\te.Debug = true\n\te.IPExtractor = echo.ExtractIPFromRealIPHeader()\n\te.Use(middleware.Gzip())\n\n\te.GET(&quot;/&quot;, func(c echo.Context) error {\n\t\treturn c.HTML(http.StatusOK, `&lt;H1&gt;CyberPoC SSRF&lt;/H1&gt;&lt;br/&gt;\n&lt;a href=&#39;/admin&#39;&gt;Admin Dashboard&lt;/a&gt;`)\n\t})\n\n\te.GET(&quot;/admin&quot;, func(c echo.Context) error {\n\t\t_, _ = fmt.Fprintln(c.Response(), `&lt;p&gt;Verify that your an administrator, wait...&lt;/p&gt;`)\n\n\t\tclientIp := c.RealIP()\n\t\tcookie, _ := c.Request().Cookie(&quot;role&quot;)\n\t\tif cookie == nil {\n\t\t\treturn c.HTML(http.StatusForbidden, `&lt;p&gt;You are not administrator&lt;/p&gt;`)\n\t\t}\n\t\trole := cookie.Value\n\n\t\tvar passed = false\n\t\tif strings.EqualFold(role, &quot;admin&quot;) {\n\t\t\tfor _, ip := range []string{&quot;127.0.0.1&quot;, &quot;localhost&quot;} {\n\t\t\t\tif ip == clientIp {\n\t\t\t\t\tpassed = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlog.Printf(&quot;clientIp: %s, role: %s, passed: %v\\n&quot;, clientIp, role, passed)\n\n\t\tif passed {\n\t\t\thtml := fmt.Sprintf(`FLAG: %s`, os.Getenv(&quot;flag&quot;))\n\t\t\t_, _ = fmt.Fprintln(c.Response(), html)\n\t\t\treturn nil\n\t\t} else {\n\t\t\t_, _ = fmt.Fprintln(c.Response(), `&lt;p&gt;You are not administrator.&lt;/p&gt;`)\n\t\t\treturn nil\n\t\t}\n\t})\n\n\te.Logger.Fatal(e.Start(&quot;:80&quot;))\n}\n</code></pre>\n",
    "sort": 18
  }
]