// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package identity

import (
	"github.com/dushixiang/cyberpoc/internal/config"
	"github.com/dushixiang/cyberpoc/internal/identity/handler"
	"github.com/dushixiang/cyberpoc/internal/identity/service"
	"github.com/google/wire"
	"go.uber.org/zap"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func ProviderDependency(logger *zap.Logger, db *gorm.DB, conf *config.Config) *Dependency {
	userService := service.NewUserService(logger, db)
	mailService := service.NewMailService(logger, conf)
	propertyService := service.NewPropertyService(db)
	accountService := service.NewAccountService(logger, db, userService, mailService, propertyService)
	accountHandler := handler.NewAccountHandler(accountService, userService)
	propertyHandler := handler.NewPropertyHandler(propertyService)
	userHandler := handler.NewUserHandler(userService)
	loginLogService := service.NewLoginLogService(db)
	loginLogHandler := handler.NewLoginLogHandler(loginLogService)
	dependency := &Dependency{
		AccountHandler:  accountHandler,
		PropertyHandler: propertyHandler,
		UserHandler:     userHandler,
		LoginLogHandler: loginLogHandler,
		AccountService:  accountService,
		PropertyService: propertyService,
		UserService:     userService,
		LoginLogService: loginLogService,
	}
	return dependency
}

// wire.go:

var appSet = wire.NewSet(
	serviceSet,
	apiSet, wire.Struct(new(Dependency), "*"),
)

var apiSet = wire.NewSet(handler.NewUserHandler, handler.NewAccountHandler, handler.NewPropertyHandler, handler.NewLoginLogHandler)

var serviceSet = wire.NewSet(service.NewUserService, service.NewAccountService, service.NewPropertyService, service.NewMailService, service.NewLoginLogService)
